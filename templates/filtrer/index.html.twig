{% extends 'base.html.twig' %}

{% block title %}Filtrer
{% endblock %}

{% block body %}
	<main>
		<div class="card">
			<h1>Filtrer</h1>
			<form action="{{ path('app_filtrer') }}" method="post">
				<div class="form-group">
					<label for="date">Date</label>
					<input type="week" name="date" id="date" value="{{ currentWeek }}">
				</div>

				<div class="form-group">
					<label for="tp">TP</label>
					<select name="tp" id="tp">
						{% for tpOption in tpOptions %}
							<option value="{{ tpOption }}" {% if tpOption == selectedTp %} selected {% endif %}>
								{{ tpOption }}
							</option>
						{% endfor %}
					</select>
				</div>

				<div class="form-group">
					<label for="module">Module</label>
					<select name="module" id="module">
						<option value="" selected>Tous les modules</option>
						{% for moduleOption in moduleOptions %}
							<option value="{{ moduleOption }}" {% if moduleOption == selectedModule %} selected {% endif %}>
								{{ moduleOption }}
							</option>
						{% endfor %}
					</select>
				</div>


				<button type="submit">Filtrer</button>
			</form>

			{% if filteredData %}
				<h2>Résultats :</h2>
				<ul class="work-list" id="workList">
					{% for work in filteredData %}
						{% set workId = work.date ~ '-' ~ work.titre | replace({ ' ': '', '/': '', ':': '' }) %}
						<li class="work-item" data-tp="{{ work.tp }}" data-user-tp="{{ app.session.get('user_tp') }}" data-work-id="{{ workId }}">
							<strong>{{ work.date | date('d/m/Y') }}</strong>
							-
							{{ work.titre }}
							(TP
							{{ work.tp }})
							{% if work.description is defined %}
								<p>
									<em>Description:</em>
									{{ work.description }}</p>
							{% endif %}
							{% if work.typeRendu is defined %}
								<p>
									<em>Type de rendu:</em>
									{{ work.typeRendu }}</p>
							{% endif %}
						</li>
					{% endfor %}
				</ul>
			{% else %}
				<p>Aucun travail pour la sélection actuelle.</p>
			{% endif %}

		</div>
	</main>

	<script>
		document.addEventListener("DOMContentLoaded", function () {
var dateInput = document.getElementById('date');

// Récupérer la date actuelle du localStorage
var storedDate = localStorage.getItem('stored_date');
if (storedDate) {
dateInput.value = storedDate;
}

// Écouter les changements de valeur de l'input et mettre à jour le localStorage
dateInput.addEventListener('input', function () {
localStorage.setItem('stored_date', dateInput.value);
});

var workItems = document.querySelectorAll('.work-item');

workItems.forEach(function (item) {
var workId = item.getAttribute('data-work-id');
var isSelected = localStorage.getItem('selectedWork_' + workId) === 'true';

if (isSelected) {
item.classList.add('selected');
}

item.addEventListener('click', function () {
var userTp = item.getAttribute('data-user-tp');
var tp = item.getAttribute('data-tp');

if (userTp === tp) {
item.classList.toggle('selected');

// Mettre à jour le stockage local
localStorage.setItem('selectedWork_' + workId, item.classList.contains('selected').toString());
}
});
});
});
	</script>
{% endblock %}
